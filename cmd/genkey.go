package cmd

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"

	"github.com/kairos-io/enki/pkg/config"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"

	"github.com/foxboron/go-uefi/efi/signature"
	efiutil "github.com/foxboron/go-uefi/efi/util"
	"github.com/foxboron/sbctl"
	"github.com/foxboron/sbctl/certs"
	"github.com/foxboron/sbctl/fs"
)

func NewGenkeyCmd() *cobra.Command {
	c := &cobra.Command{
		Use:   "genkey NAME",
		Short: "Generate secureboot keys under the uuid generated by NAME",
		Args:  cobra.ExactArgs(1),
		RunE: func(cobraCmd *cobra.Command, args []string) error {
			// Set this after parsing of the flags, so it fails on parsing and prints usage properly
			cobraCmd.SilenceUsage = true

			cfg, err := config.ReadConfigBuild(viper.GetString("config-dir"), cobraCmd.Flags())
			if err != nil {
				return err
			}
			l := cfg.Logger
			name := args[0]

			uuid := sbctl.CreateUUID()
			if err != nil {
				return err
			}
			guid := efiutil.StringToGUID(string(uuid))
			output, _ := cobraCmd.Flags().GetString("output")

			err = os.MkdirAll(output, 0700)
			if err != nil {
				l.Errorf("Error creating output directory: %s", err)
				return err
			}

			for _, keyType := range []string{"PK", "KEK", "db"} {
				l.Infof("Generating %s", keyType)
				key := filepath.Join(output, fmt.Sprintf("%s.key", keyType))
				pem := filepath.Join(output, fmt.Sprintf("%s.pem", keyType))
				der := filepath.Join(output, fmt.Sprintf("%s.der", keyType))

				args := []string{
					"req", "-nodes", "-x509", "-subj", fmt.Sprintf("/CN=%s/", name),
					"-keyout", key,
					"-out", pem,
				}
				if viper.GetString("expiration-in-days") != "" {
					args = append(args, "-days", viper.GetString("expiration-in-days"))
				}
				cmd := exec.Command("openssl", args...)
				out, err := cmd.CombinedOutput()
				if err != nil {
					l.Errorf("Error generating %s: %s", keyType, string(out))
					return err
				}
				l.Infof("%s generated at %s and %s", keyType, key, pem)

				l.Infof("Converting %s.pem to DER", keyType)
				cmd = exec.Command(
					"openssl", "x509", "-outform", "DER", "-in", pem, "-out", der,
				)

				out, err = cmd.CombinedOutput()
				if err != nil {
					l.Errorf("Error generating %s: %s", keyType, string(out))
					return err
				}
				l.Infof("%s generated at %s", keyType, der)

				err = generateAuthKeys(*guid, output, keyType)
				if err != nil {
					l.Errorf("Error generating auth keys: %s", err)
					return err
				}
			}

			// Generate the policy encryption key
			l.Infof("Generating policy encryption key")
			tpmPrivate := filepath.Join(output, "tpm2-pcr-private.pem")
			cmd := exec.Command(
				"openssl", "genrsa", "-out", tpmPrivate, "2048",
			)
			out, err := cmd.CombinedOutput()
			if err != nil {
				l.Errorf("Error generating tpm2-pcr-private.pem: %s", string(out))
				return err
			}
			return nil
		},
	}
	c.Flags().StringP("output", "o", "keys/", "Output directory for the keys")
	c.Flags().StringP("expiration-in-days", "e", "365", "In how many days from today should the certificates expire")

	viper.BindPFlag("expiration-in-days", c.Flags().Lookup("expiration-in-days"))
	return c
}

func init() {
	rootCmd.AddCommand(NewGenkeyCmd())
}

func generateAuthKeys(guid efiutil.EFIGUID, keyPath, keyType string) error {
	// Prepare all the keys we need
	key, err := fs.ReadFile(filepath.Join(keyPath, keyType+".key"))
	if err != nil {
		return fmt.Errorf("reading the key file %w", err)
	}

	pem, err := fs.ReadFile(filepath.Join(keyPath, keyType+".pem"))
	if err != nil {
		return fmt.Errorf("reading the pem file %w", err)
	}

	sigdb := signature.NewSignatureDatabase()

	if err = sigdb.Append(signature.CERT_X509_GUID, guid, pem); err != nil {
		return fmt.Errorf("appending signature %w", err)
	}

	if keyType != "PK" {
		// Load microsoft certs
		oemSigDb, err := certs.GetOEMCerts("microsoft", keyType)
		if err != nil {
			return fmt.Errorf("could not enroll db keys (type %s): %w", keyType, err)
		}
		sigdb.AppendDatabase(oemSigDb)
	}

	signedDB, err := sbctl.SignDatabase(sigdb, key, pem, keyType)
	if err != nil {
		return fmt.Errorf("creating the signed db: %w", err)
	}

	if err := fs.WriteFile(filepath.Join(keyPath, keyType+".auth"), signedDB, 0o644); err != nil {
		return fmt.Errorf("writing the auth file: %w", err)
	}

	if err := fs.WriteFile(filepath.Join(keyPath, keyType+".esl"), sigdb.Bytes(), 0o644); err != nil {
		return fmt.Errorf("writing the esl file: %w", err)
	}

	return nil
}
